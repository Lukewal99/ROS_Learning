#!/usr/bin/env python3
  
import rospy
from geometry_msgs.msg import Quaternion
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from tf.broadcaster import TransformBroadcaster
from std_msgs.msg import Int32

import time  # Import the Time library
from math import sin, cos, pi
class DiffTf:
    def __init__(self):
        #initialise
        self.rate = rospy.get_param('~rate',10.0)

        self.left = 0
        self.right = 0
        self.current_time = rospy.Time.now()
        self.current_time_left = rospy.Time.now()
        self.previous_time_left = rospy.Time.now()
        self.current_time_right = rospy.Time.now()
        self.previous_time_right = rospy.Time.now()
        self.left_dt = 0
        self.right_t = 0

        #subscriptions
        rospy.Subscriber("~lwheel_ticks", Int32, self.lwheelCallback)
        rospy.Subscriber("~rwheel_ticks", Int32, self.rwheelCallback)
        self.odomPub = rospy.Publisher("odom", Odometry, queue_size=10)
        self.odomBroadcaster = TransformBroadcaster()

    def spin():
       r = rospy.Rate(self.rate)
       while not rospy.is_shutdown():
           self.update()
           r.sleep() 
   
    def update():
        self.left_dt = self.current_time_left - self.previous_time_left
        self.right_dt = self.current_time_right - self.previous_time_right
        
        #IF only passes if there has been a new left encoder value since last loop
        self.current_time = rospy.Time.now()
        if(self.current_time_left + (1/self.rate) >= self.current_time):
            #placeholder

        #IF only passes if there has been a new right encoder value since last loop
        self.current_time = rospy.Time.now()
        if(self.current_time_right + (1/self.rate) >= self.current_time):
            #placeholder

    def lwheelCallback(self, msg):
        self.left = msg.data
        self.previous_time_left = self.current_time_left
        self.current_time_left = rospy.Time.now()

    def rwheelCallback(self, msg):
        self.right = msg.data
        self.previous_time_right = self.current_time_right
        self.current_time_right = rospy.Time.now()



 if(__name__ == '__main__'):
    diffTf = DiffTf()
    diffTF.spin()
