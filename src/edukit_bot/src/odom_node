#!/usr/bin/env python3
  
import rospy
from geometry_msgs.msg import Quaternion
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from tf.broadcaster import TransformBroadcaster
from std_msgs.msg import Int32

import time  # Import the Time library
from math import sin, cos, pi
class DiffTf:
    def __init__(self):
        #initialise
        self.rate = rospy.get_param('~rate',5)

        self.left = 0
        self.right = 0
        self.left_used = true
        self.right_used = true

        #subscriptions
        rospy.Subscriber("~lwheel_ticks", Int32, self.lwheelCallback)
        rospy.Subscriber("~rwheel_ticks", Int32, self.rwheelCallback)
        self.odomPub = rospy.Publisher("odom", Odometry, queue_size=10)
        self.odomBroadcaster = TransformBroadcaster()

    def spin():
       # As soon as we get new L and R values process them
       r = rospy.Rate(self.rate * 10)
       while not rospy.is_shutdown():
           self.update()
           r.sleep() 
   
    def update():
       
        # If left unused and right unused
            #mark as used
            #calcs
            #publish


    def lwheelCallback(self, msg):
        self.left = msg.data
        if (self.left_used = false): 
          # log error
        else:
          self.left_used = false

    def rwheelCallback(self, msg):
        self.right = msg.data
        if(self.right_used = false): 
          # log error
        else:
          self.right_used = false



 if(__name__ == '__main__'):
    diffTf = DiffTf()
    diffTF.spin()
